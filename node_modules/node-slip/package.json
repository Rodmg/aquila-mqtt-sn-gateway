{
  "name": "node-slip",
  "description": "RFC 1055 compliant SLIP packet parsing and generation.",
  "maintainers": [
    {
      "name": "OhMeadhbh",
      "email": "OhMeadhbh@gmail.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/OhMeadhbh/node-slip/raw/master/LICENSE"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "git+https://github.com/OhMeadhbh/node-slip.git"
    }
  ],
  "version": "0.0.2",
  "main": "./node-slip.js",
  "keywords": [
    "slip",
    "rfc1055"
  ],
  "readme": "# node-slip\n\nThis package parses (and generates) RFC 1055 Serial Line Internet Protocol\n(SLIP) packets. Used in conjunction with packages like node-serialport, it\ncan be useful to communicate between node programs and old-skool embedded\nsystems that are still using SLIP.\n\nNote: this package is does not support CSLIP (Compressed SLIP.) \n\n## Installation\n\nThe easiest way to install this package is to use npm:\n\n<pre>    npm install node-slip</pre>\n\nIf you want to check out the source, use the git command:\n\n<pre>    git clone git://github.com/OhMeadhbh/node-slip.git</pre>\n\n## Usage\n\n### Theory of Operation\n\nThis package lets you parse and generate SLIP formatted packets. The parser\nis implemented in a simple stateful object. The user feeds a SLIP octet stream\nto the parser object. This parser object strips off the leading and trailing\nEND characters (0xC0) and unescapes escape sequences (0xDB 0xDC and 0xDB 0xDD).\n\nWhen you initialize a parser, you pass it a \"receiver\" object. When the parser\nreceives a complete packet, it calls the \"data\" function in the receiver\nobject. If the receiver defines \"framing\" or \"escape\" functions, it will\ncall these functions when it encounters framing or escape errors.\n\nThe packet generator is a simple static method on the slip package. Pass it a\nraw node Buffer and the generator will add END characters to the front and\nback and escape octets that require escaping.\n\n### Using the Parser\n\nStart your node program like any other by requiring the package:\n\n<pre>    var slip = require( 'node-slip' );</pre>\n\nNow define a receiver object. This is an instance that optionally defines the\nfunctions: data, framing and escape. Here's a very simple example:\n\n<pre>    var receiver = {\n      data: function( input ) {\n        console.log( \"Hey! We Got a Packet: \" + input.toString( 'hex' ).toUpperCase() );\n      },\n      framing: function( input ) {\n        console.log( \"OMG! A Framing Error: \" + input.toString( 'hex' ).toUpperCase() );\n      },\n      escape: function( input ) {\n        console.log( \"OMG! An Escape Error: \" + input.toString( 16 ).toUpperCase() );\n      }\n    };</pre>\n\nNow instantiate a slip parser like so:\n\n<pre>    var parser = new slip.parser( receiver, strict );</pre>\n\n(strict is a bool that will mandate SLIP packets begin and end with the END character if set to true.  It defaults to true.)\n\nAnd start sending the parser some data:\n\n<pre>    parser.write( new Buffer( 'C000112233445566DBDCDBDDC0', 'hex' ) );</pre>\n\nIn theory, this line should emit something like this:\n\n<pre>     Hey! We Got a Packet: 00112233445566C0DB</pre>\n\nBut if you did something like this, you'll see why it's a useful package:\n\n<pre>    parser.write( new Buffer( 'C0FFEEDD', 'hex' ) );\n    parser.write( new Buffer( '001122C0', 'hex' ) );</pre>\n\nThis code fragment will emit this:\n\n<pre>     Hey! We Got a Packet: FFEEDD001122</pre>\n\nNote the parser doesn't emit anything until the whole packet is available. This\nis useful if (like me) you're using node-serialport to read input from an\nembedded system over the serial port and that embedded system doesn't always\ngive you complete packets.\n\nAnother fun thing that can happen is we get two (or more) SLIP packets in one\ncall to read the serial port. This sometimes happens if your packets are small\nand you only process serial port input every NNN microseconds. So if you\ndo this:\n\n<pre>    parser.write( new Buffer( 'C0FFEEDDC0C0DDEEFFC0', 'hex' ) );</pre>\n\nYou'll get this:\n\n<pre>     Hey! We Got a Packet: FFEEDD\n     Hey! We Got a Packet: DDEEFF</pre>\n\nAnd if you get a framing error (like you add stuff between the two middle\nEND bytes, we collect the data and pass it as a parameter to the framing()\nfunction. Ergo, doing this:\n\n<pre>    parser.write( new Buffer( 'C0FFEEDDC0AA55A55AC0DDEEFFC0', 'hex' ) );</pre>\n\nWill get you this:\n\n<pre>    Hey! We Got a Packet: FFEEDD\n    OMG! A Framing Error: AA55A55A\n    Hey! We Got a Packet: DDEEFF</pre>\n\nMucking up an escape sequence will cause the escape() function in the\nreceiver to be called. So if you do this:\n\n<pre>    parser.write( new Buffer( 'C00011DBAA1100C0', 'hex' ) );</pre>\n\nYou get this:\n<pre>    OMG! An Escape Error: AA\n    Hey! We Got a Packet: DDEEFF</pre>\n\nNote: data() and framing() are passed Buffer objects. escape() is only passed\na number.\n\n### Using the Generator\n\nThe generator is much simpler. You simply call the slip.generator() function,\npassing it a buffer as input. What you get back will be a data buffer with\nstarting and ending END bytes applied and C0 and DB bytes escaped.\n\nThis routine:\n\n<pre>    var slip = require( 'node-slip' );\n    var input = Buffer( '00FF00FFDBFFC0FF', 'hex' );\n    console.log( \"Here's your SLIPified packet: \" + slip.generator( input ).toString( 'hex' ).toUpperCase() );</pre>\n\nWill output this:\n\n<pre>    Here's your SLIPified packet: C000FF00FFDBDDFFDBDCFFC0</pre>\n\nThe generator call also takes an optional 'strict' parameter. It defaults to true. Explicitly setting the strict\nparameter to false causes the generator to omit the initial END byte. For example, this routine:\n\n<pre>    var slip = require( 'node-slip' );\n    var input = Buffer( '00FF00FFDBFFC0FF', 'hex' );\n    console.log( \"Here's your SLIPified packet: \" + slip.generator( input, false ).toString( 'hex' ).toUpperCase() );</pre>\n\nWill generate this:\n\n<pre>    Here's your SLIPified packet: 00FF00FFDBDDFFDBDCFFC0</pre>\n",
  "readmeFilename": "README.md",
  "_id": "node-slip@0.0.2",
  "dist": {
    "shasum": "00f51abd24c291170beae711b7036010cb2e5a6e",
    "tarball": "http://registry.npmjs.org/node-slip/-/node-slip-0.0.2.tgz"
  },
  "_from": "node-slip@latest",
  "_npmVersion": "1.2.17",
  "_npmUser": {
    "name": "OhMeadhbh",
    "email": "OhMeadhbh@gmail.com"
  },
  "directories": {},
  "_shasum": "00f51abd24c291170beae711b7036010cb2e5a6e",
  "_resolved": "https://registry.npmjs.org/node-slip/-/node-slip-0.0.2.tgz",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/OhMeadhbh/node-slip.git"
  },
  "bugs": {
    "url": "https://github.com/OhMeadhbh/node-slip/issues"
  },
  "homepage": "https://github.com/OhMeadhbh/node-slip#readme"
}
