{"version":3,"sources":["../src/MQTTTransport.ts"],"names":[],"mappings":"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","file":"MQTTTransport.js","sourcesContent":["\nimport * as Slip from 'node-slip';\nimport { EventEmitter } from 'events';\nimport * as mqtt from 'mqtt';\nimport { log } from './Logger';\nimport { calcCrc, checkCrc } from './CrcUtils';\nimport { TransportInterface } from './interfaces';\n\nexport class MQTTTransport extends EventEmitter implements TransportInterface {\n\n  fake: boolean = false;\n  url: string;\n  inTopic: string;\n  outTopic: string;\n\n  // Serial port write buffer control\n  writing: boolean = false;\n  writeBuffer: Array<any> = [];\n\n  externalClient: boolean = false;\n  client: mqtt.Client = null;\n  parser: any;\n\n  constructor(url: string, inTopic: string, outTopic: string, client?: mqtt.Client) {\n    super();\n\n    this.url = url;\n    this.inTopic = inTopic;\n    this.outTopic = outTopic;\n\n    if(client != null) {\n      this.externalClient = true;\n      this.client = client;\n    }\n\n    let receiver = {\n      data: (input: Buffer) => {\n        // Check CRC\n        let crcOk = checkCrc(input);\n        // Strip CRC data\n        let data = input.slice(0, input.length - 2);\n\n        if(crcOk) {\n          this.emit(\"data\", data);\n        }\n        else {\n          this.emit(\"crcError\", data);\n        }\n        \n      },\n      framing: (input: Buffer) => {\n        this.emit(\"framingError\", input);\n      },\n      escape: (input: Buffer) => {\n        this.emit(\"escapeError\", input);\n      }\n    };\n\n    this.parser = new Slip.parser(receiver);\n  }\n\n  connect(): Promise<void>  {\n\n    if(this.client == null) this.client = mqtt.connect(this.url);\n\n    this.client.on('connect', () => {\n        log.debug('Connected to MQTT broker (MQTTTransport)');\n        // Subscribe to bridge out topic\n        this.client.subscribe(this.outTopic, { qos: 2 });\n      });\n\n    this.client.on('offline', () => {\n        log.warn('MQTT broker offline (MQTTTransport)');\n      });\n\n    this.client.on('reconnect', () => {\n        log.warn('Trying to reconnect with MQTT broker (MQTTTransport)');\n      });\n\n    this.client.on('message', (topic: string, message: Buffer, packet: any) => {\n      //if(message.length > MAXLEN) return log.warn(\"message too long\");\n      if(topic !== this.outTopic) return; //log.error(\"bad topic\");\n      // Convert from base64\n      message = Buffer.from(message.toString(), 'base64');\n      //console.log(message, message.toString('utf-8'));\n      this.parser.write(message);\n    });\n\n    if(this.externalClient || this.client.connected) {\n      // Do connect event for the first time\n      // Make subscriptions for the first time\n      this.client.subscribe(this.outTopic, { qos: 2 });\n      return Promise.resolve(null);\n    }\n    else {\n      return new Promise<void>((resolve, reject) => {\n        this.client.once('connect', () => {\n          // Make subscriptions for the first time\n          this.client.subscribe(this.outTopic, { qos: 2 });\n          resolve(null);\n        });\n      });\n    }\n\n  }\n\n  close(callback: Function) {\n    if(!callback) callback = function(){};\n    if(this.client == null || this.externalClient) return;\n    this.client.end(false, (err: any) => {\n      if(err) return callback(err); \n      callback(); \n    });\n  }\n\n  write(data: any) {\n    data = new Buffer(data);\n    // Append CRC\n    let crc = calcCrc(data);\n    let crcBuf = new Buffer(2);\n\n    crcBuf.writeUInt16LE(crc, 0);\n\n    let buffer = Buffer.concat([data, crcBuf]);\n\n    // Convert to Slip\n    let slipData = Slip.generator(buffer);\n\n    // Convert to Base64\n    slipData = new Buffer(slipData.toString('base64'));\n\n    this.writeBuffer.push(slipData);\n    this.writeNow();\n  }\n\n  writeNow() {\n    if(this.client == null) return;\n\n    // Nothing to do here\n    if(this.writeBuffer.length <= 0) return;\n    // We are busy, do nothing\n    if(this.writing) return;\n    this.writing = true;\n\n    // do nothing if we are in fake mode\n    if(this.fake) { this.writing = false; return; }\n\n\n    var data = this.writeBuffer.shift();\n    this.client.publish(this.inTopic, data, {\n        qos: 2,\n        retain: false\n      });\n\n    //if(config.debug) console.log(\"Sending:\", data);\n\n    this.writing = false;\n    if(this.writeBuffer.length > 0) this.writeNow();\n  }\n\n}\n"],"sourceRoot":"/Users/rod/workshop/blastbot-gateway/aquila-gateway/src"}