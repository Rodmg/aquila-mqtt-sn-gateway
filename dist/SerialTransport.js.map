{"version":3,"sources":["../src/SerialTransport.ts"],"names":[],"mappings":"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","file":"SerialTransport.js","sourcesContent":["// SerialTransport.js\n\nimport * as SerialPort from 'serialport';\nimport * as Slip from 'node-slip';\nimport { EventEmitter } from 'events';\nimport { calcCrc, checkCrc } from './CrcUtils';\nimport { TransportInterface } from './interfaces';\n\nexport class SerialTransport extends EventEmitter implements TransportInterface {\n\n  fake: boolean = false;\n  // Serial port write buffer control\n  writing: boolean = false;\n  writeBuffer: Array<any> = [];\n\n  parser: any;\n  serialPort: SerialPort;\n\n  constructor(baudrate: number, port: string) {\n    super();\n\n    const receiver = {\n      data: (input: Buffer) => {\n        // Check CRC\n        let crcOk = checkCrc(input);\n        // Strip CRC data\n        let data = input.slice(0, input.length - 2);\n\n        if(crcOk) {\n          this.emit(\"data\", data);\n        }\n        else {\n          this.emit(\"crcError\", data);\n        }\n      },\n      framing: (input: Buffer) => {\n        this.emit(\"framingError\", input);\n      },\n      escape: (input: Buffer) => {\n        this.emit(\"escapeError\", input);\n      }\n    };\n\n    this.parser = new Slip.parser(receiver);\n\n    this.serialPort = new SerialPort(port, {\n        baudrate: baudrate,\n        autoOpen: false\n      });\n\n    this.serialPort.on(\"data\", (data) => {\n        this.parser.write(data);\n      });\n\n    this.serialPort.on(\"open\", () => {\n        this.emit(\"ready\");\n      });\n\n    this.serialPort.on(\"error\", (err) => {\n        this.emit(\"error\", err);\n      });\n\n    this.serialPort.on(\"disconnect\", (err) => {\n        this.emit(\"disconnect\", err);\n      });\n\n    this.serialPort.on(\"close\", () => {\n        this.emit(\"close\");\n      });\n  }\n\n  connect(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.serialPort.open((err: any) => {\n        if(err) {\n          this.emit(\"error\", err);\n          return reject(err);\n        }\n        return resolve(null);\n      });\n    });\n  }\n\n  close(callback: Function) {\n    if(!callback) callback = function(){};\n    this.serialPort.flush((err) => {\n      if(err) return callback(err);\n      this.serialPort.drain((err) => {\n        if(err) return callback(err);\n        this.serialPort.close( () => callback() );\n      });\n    });\n  }\n\n  write(data: any) {\n    data = new Buffer(data);\n    // Append CRC\n    let crc = calcCrc(data);\n    let crcBuf = new Buffer(2);\n\n    crcBuf.writeUInt16LE(crc, 0);\n\n    let buffer = Buffer.concat([data, crcBuf]);\n\n    // Convert to Slip\n    let slipData = Slip.generator(buffer);\n\n    this.writeBuffer.push(slipData);\n    this.writeNow();\n  }\n\n  writeNow() {\n    // Nothing to do here\n    if(this.writeBuffer.length <= 0) return;\n    // We are busy, do nothing\n    if(this.writing) return;\n    this.writing = true;\n\n    // do nothing if we are in fake mode\n    if(this.fake) { this.writing = false; return; }\n\n    this.serialPort.drain(() => {\n        let data = this.writeBuffer.shift();\n        this.serialPort.write(data);\n\n        //if(config.debug) console.log(\"Sending:\", data);\n\n        this.writing = false;\n        if(this.writeBuffer.length > 0) this.writeNow();\n      });\n  }\n\n}\n"],"sourceRoot":"/Users/rod/workshop/blastbot-gateway/aquila-gateway/src"}