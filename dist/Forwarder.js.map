{"version":3,"sources":["../src/Forwarder.ts"],"names":[],"mappings":"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","file":"Forwarder.js","sourcesContent":["\nimport { EventEmitter } from 'events';\nimport { logÂ } from './Logger';\nimport { TransportInterface, DBInterface } from './interfaces';\n\n/*\n  Manages connections with bridge and initial parsing\n\n  Events:\n    data ({lqi, rssi, addr, mqttsnFrame})\n\n  Serial frame formats:\n\n    MQTT-SN forwarder: msgType = 0xFE\n      len, msgType, ctrl, addrL, addrH, mqttsnpacket\n    NACK\n      len, 0x00\n    ACK:\n      len, 0x01\n    CONFIG:\n      len, 0x02, [PAN], [encryption key x 16]\n    ENTER PAIR:\n      len, 0x03, 0x01\n    EXIT PAIR\n      len, 0x03, 0x00\n    PAIR REQ\n      len, 0x03, 0x02, addrL, addrH, length (3), pair cmd (0x03), randomId\n    PAIR RES\n      len, 0x03, 0x03, addrL, addrH, length (4), pair cmd (0x03), randomId, newAddr, newPan (, [encryption key x 16] )\n\n  TODO: add not connected state management\n */\n\nconst ACKTIMEOUT = 5000;\nconst MAX_BUFFER_ALLOWED = 10;\n\nconst NACK_CMD = 0x00;\nconst ACK_CMD = 0x01;\nconst CONFIG_CMD = 0x02;\nconst PAIR_CMD = 0x03;\n\nconst NO_KEY = [0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF];\n\nexport interface ForwarderMessage {\n  lqi: number;\n  rssi: number;\n  len: number;\n  msgType: number,\n  ctrl: number,\n  addr: number,\n  mqttsnFrame: Buffer\n}\n\nexport class Forwarder extends EventEmitter {\n\n  db: DBInterface;\n  transport: TransportInterface;\n  readyToSend: boolean = true;\n  frameBuffer: Array<Buffer> = [];\n  ackTimeout: NodeJS.Timer = null;\n  pan: number = 0x01;\n  key: Array<number> = NO_KEY;\n  pairMode: boolean = false;\n\n  constructor(db: DBInterface, transport: TransportInterface, pan?: number, encryptionKey?: Array<number>) {\n    super();\n\n    // For pair address management\n    this.db = db;\n    this.transport = transport;\n\n    if(pan != null) this.pan = pan;\n    if(encryptionKey != null) {\n      if(encryptionKey.length !== 16) log.warn(\"Invalid encryption key received, starting without encryption\");\n      else this.key = encryptionKey;\n    }\n\n  }\n\n  connect(): Promise<void> {\n    \n    this.transport.on('error', (err: any) => {\n        log.error(\"There was an error connecting to the Bridge, make sure it's connected to the computer.\");\n        throw err;\n      });\n\n    this.transport.on('disconnect', (err: any) => {\n        log.error(\"The Bridge was disconnected from the computer.\");\n        throw err;\n      });\n\n    this.transport.on('data', (data: Buffer) => {\n        //log.trace('Data: ', data);\n        \n        if(this.pairMode) return this.handlePairMode(data);\n\n        // 5 of mqtt-sn forwarder, 2 of lqi and rssi\n        if(data.length < 4) return log.error('Forwarder: got message with not enough data');\n        let lqi = data[0];\n        let rssi = data[1];\n        let len = data[2];\n        let msgType = data[3];\n        if(msgType !== 0xFE) {\n          if(msgType === NACK_CMD) {\n            // NACK\n            //console.log(\"NACK\");\n            this.readyToSend = true;\n            clearTimeout(this.ackTimeout);\n            this.sendNow(); // Send any remaining messages\n          }\n          else if(msgType === ACK_CMD) {\n            // ACK\n            //console.log(\"ACK\");\n            this.readyToSend = true;\n            clearTimeout(this.ackTimeout);\n            this.sendNow(); // Send any remaining messages\n          }\n          else if(msgType === CONFIG_CMD) {\n            log.trace(\"GOT CONFIG\");\n            // CONFIG req, respond with CONFIG\n            this.sendConfig();\n            this.sendNow(); // Send any remaining messages\n          }\n          else return log.error('Forwarder: bad forwarder msg type');\n          return;\n        } \n        if(data.length < 7) return log.error('Forwarder: got message with not enough data');\n        let ctrl = data[4];\n        let addr = data.readUInt16LE(5);\n        let mqttsnFrame = data.slice(7);\n\n        // If not in pair mode, ignore any message from address 0 (pair mode address)\n        if(addr === 0 && !this.pairMode) return;\n\n        let message: ForwarderMessage = {\n            lqi: lqi,\n            rssi: rssi,\n            len: len,\n            msgType: msgType,\n            ctrl: ctrl,\n            addr: addr,\n            mqttsnFrame: mqttsnFrame\n          }\n\n        this.emit('data', message);\n        \n      });\n    this.transport.on('crcError', (data: Buffer) => log.error('crcError', data) );\n    this.transport.on('framingError', (data: Buffer) => log.error('framingError', data) );\n    this.transport.on('escapeError', (data: Buffer) => log.error('escapeError', data) );\n\n    \n\n    return this.transport.connect()\n    .then(() => {\n      // Assure that config is sent on start, in addition to when the bridge requests it\n      // Some USB-Serial chips have problems sending the config request on startup, this is a workaround for that\n      // We wait 2.1 seconds for accounting to most Arduino bootloader's startup time (2s)\n      setTimeout(() => {\n        setTimeout(() => this.sendConfig(), 2100);\n      }, 100);\n      return null;\n    });\n    \n  }\n\n  disconnect() {\n    this.transport.removeAllListeners('data');\n    this.transport.removeAllListeners('crcError');\n    this.transport.removeAllListeners('framingError');\n    this.transport.removeAllListeners('escapeError');\n    this.transport.close();\n    delete this.transport;\n    delete this.db;\n  }\n\n  enterPairMode() {\n    this.pairMode = true;\n    let frame = new Buffer([3, 0x03, 0x01]);\n    this.frameBuffer.push(frame);\n    this.sendNow();\n  }\n\n  exitPairMode() {\n    this.pairMode = false;\n    let frame = new Buffer([3, 0x03, 0x00]);\n    this.frameBuffer.push(frame);\n    this.sendNow();\n  }\n\n  getMode() {\n    return this.pairMode ? 'pair' : 'normal';\n  }\n\n  async handlePairMode(data: Buffer) {\n    if(data.length < 4) return log.error('Forwarder: got message with not enough data');\n    let lqi = data[0];\n    let rssi = data[1];\n    let len = data[2];\n    let msgType = data[3];\n    if(msgType !== 0x03) {\n      if(msgType === 0x00) {\n        // NACK\n        //console.log(\"NACK\");\n        this.readyToSend = true;\n        clearTimeout(this.ackTimeout);\n        this.sendNow(); // Send any remaining messages\n      }\n      else if(msgType === 0x01) {\n        // ACK\n        //console.log(\"ACK\");\n        this.readyToSend = true;\n        clearTimeout(this.ackTimeout);\n        this.sendNow(); // Send any remaining messages\n      }\n      else return log.error('Forwarder: bad forwarder msg type');\n      return;\n    } \n    // Parse PAIR REQ\n    if(data.length < 10) return log.error('Forwarder: got message with not enough data');\n    let ctrl = data[4];\n    if(ctrl !== 0x02) return log.error('Forwarder: bad message');\n    let addr = data.readUInt16LE(5);\n    if(addr !== 0) return log.error('Forwarder: bad address for pair mode');\n    //let len = data[7];\n    let paircmd = data [8];\n    if(paircmd !== PAIR_CMD) return log.warn(\"Bad cmd on pair message\");\n\n    let randomId = data[9]; // For managin when multiple devices try to pair, temporal \"addressing\"\n\n    // Assing address and send\n    let newAddr\n    try {\n      newAddr = await this.db.getNextDeviceAddress();\n    }\n    catch(err) {\n      return log.error(\"Error getting next device address from DB.\", err);\n    }\n    if(newAddr == null || isNaN(newAddr)) return log.warn(\"WARNING: Max registered devices reached...\");\n    // Create empty device for occupying the new address\n    let device = {\n      address: newAddr,\n      connected: false,\n      state: 'disconnected',\n      waitingPingres: false,\n      lqi: 0,\n      rssi: 0,\n      duration: 10,\n      lastSeen: new Date(),\n      willTopic: null,\n      willMessage: null,\n      willQoS: null,\n      willRetain: null\n    };\n\n    try {\n      await this.db.setDevice(device);\n    }\n    catch(err) {\n      return log.error(\"Error saving Device to DB.\", err);\n    }\n\n    // PAIR RES\n    let frame = Buffer.from([7, 0x03, 0x03, 0x00, 0x00, 21, 0x03, randomId, newAddr, this.pan]);\n    let key = Buffer.from(this.key);\n    frame = Buffer.concat([frame, key]);\n    //console.log(\"Pair RES:\", frame);\n    this.frameBuffer.push(frame);\n    this.sendNow();\n\n    this.exitPairMode();\n\n    this.emit(\"devicePaired\", device);\n  }\n\n  send(addr: number, packet: Buffer) {\n    // Dont allow sending any message out of pair messages in pair mode\n    if(this.pairMode) return false;\n\n    // Check for max buffer allowed\n    if(this.frameBuffer.length >= MAX_BUFFER_ALLOWED) {\n      log.trace('Forwarder buffer full, packet dropped');\n      this.sendNow();\n      return false;\n    }\n\n    // len, msgType, ctrl, addrL, addrH, mqttsnpacket\n    let addrL = (addr) & 0xFF;\n    let addrH = (addr>>8) & 0xFF;\n    let frame = new Buffer([5, 0xFE, 1, addrL, addrH]);\n    frame = Buffer.concat([frame, packet]);\n    this.frameBuffer.push(frame);\n    this.sendNow();\n\n    return true;\n  }\n\n  sendNow() {\n    if(!this.readyToSend) return;\n    let frame = this.frameBuffer.shift();\n    if(typeof(frame) === 'undefined') return;\n    this.readyToSend = false;\n    this.transport.write(frame);\n    this.ackTimeout = setTimeout( () => {\n        this.readyToSend = true;\n        this.sendNow(); // Make sure any pending messages are sent\n      }, ACKTIMEOUT);\n  }\n\n  sendConfig() {\n    let frame = Buffer.from([19, CONFIG_CMD, this.pan]);\n    let key = Buffer.from(this.key);\n    frame = Buffer.concat([frame, key])\n    log.trace(\"Sending config:\", frame);\n    this.frameBuffer.push(frame);\n    this.sendNow();\n  }\n\n}\n"],"sourceRoot":"/Users/rod/workshop/aquila-gateway/src"}