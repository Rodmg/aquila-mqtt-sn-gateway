{"version":3,"sources":["../src/Gateway.ts"],"names":[],"mappings":"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","file":"Gateway.js","sourcesContent":["\nimport { EventEmitter } from 'events';\nimport * as mqttsn from 'mqttsn-packet';\nimport * as mqtt from 'mqtt';\nimport { log } from './Logger';\nimport { Forwarder, ForwarderMessage } from './Forwarder';\nimport { DBInterface } from './interfaces';\n\nconst parser = mqttsn.parser();\n\n/*\n  Manages mqtt-sn messages and protocol logic, forwards to mqtt\n\n  Events:\n    - deviceConnected\n    - deviceDisconnected\n */\n\nconst TADV = 15*60;   // seconds\nconst NADV = 3;       // times\nconst TSEARCHGW = 5;  // seconds\nconst TGWINFO = 5;    // seconds\nconst TWAIT = 5*60;   // seconds\nconst TRETRY = 15;    // seconds\nconst NRETRY = 5;     // times\n\nconst GWID = 0x00FF;\n\nconst MAXLEN = 100; // Max message len allowed\n\n// Interval for checking keep alive status\nconst KASERVINTERVAL = 1000;\n// Keep Alive tolerance\nconst DURATION_TOLERANCE = 5000;\nconst DURATION_FACTOR = 1;\n\n// Options for sending ping to device after marking as disconnected on timeout\nconst SEND_PINGREQ = true;\nconst PINGRES_TOUT = 1000;\n\n// Non standard MQTT-SN features\n// Allow automatic reconnect when receiving Disconnect with duration \n// (for entering sleep) even if device was disconnected\nconst ALLOW_SLEEP_RECONNECT = true;\n// Allow automatic reconnect of lost devices when receiving a Ping request fron device\nconst ALLOW_LOST_RECONNECT_ON_PING = true;\n\nexport class Gateway extends EventEmitter {\n\n  db: DBInterface;\n  forwarder: Forwarder;\n  client: mqtt.Client = null;\n  externalClient: boolean = false;\n  allowUnknownDevices: boolean = true;\n  keepAliveInterval: NodeJS.Timer = null;\n  advertiseInterval: NodeJS.Timer = null;\n\n  _onClientConnect: any;\n  _onClientOffline: any;\n  _onClientReconnect: any;\n  _onClientMessage: any;\n  _onParserError: any;\n\n  constructor(db: DBInterface, forwarder: Forwarder, client?: mqtt.Client) {\n    super();\n\n    this.db = db;\n    this.forwarder = forwarder;\n\n    if(client != null) {\n      this.externalClient = true;\n      this.client = client;\n    }\n\n    this._onClientConnect = () => this.onClientConnect();\n    this._onClientOffline = () => this.onClientOffline();\n    this._onClientReconnect = () => this.onClientReconnect();\n    this._onClientMessage = (topic: string, message: Buffer, packet: any) => this.onClientMessage(topic, message, packet);\n\n    this._onParserError = (error: any) => {\n      log.error('mqtt-sn parser error:', error);\n    }\n\n  }\n\n  destructor() {\n    clearInterval(this.keepAliveInterval);\n    clearInterval(this.advertiseInterval);\n\n    this.client.removeListener('connect', this._onClientConnect);\n    this.client.removeListener('offline', this._onClientOffline);\n    this.client.removeListener('reconnect', this._onClientReconnect);\n    this.client.removeListener('message', this._onClientMessage);\n\n    parser.removeListener('error', this._onParserError);\n\n    this.forwarder.disconnect();\n    delete this.forwarder;\n    delete this.db;\n    if(this.externalClient) delete this.client;\n    if(this.client == null || this.externalClient) return;\n    this.client.end(false, () => {\n      delete this.client;\n    });\n  }\n\n  init(mqttUrl: string, allowUnknownDevices: boolean): Promise<void> {\n\n    // Allow connection of not previously known devices, set to false when we only want to allow previously paired devices\n    this.allowUnknownDevices = allowUnknownDevices;\n\n    // data ({lqi, rssi, addr, mqttsnFrame})\n    this.forwarder.on('data', (data: ForwarderMessage) => {\n        let addr = data.addr;\n        let packet = parser.parse(data.mqttsnFrame);\n\n        if(packet == null) return log.debug(\"Bad mqttsn frame\");\n\n        log.debug('Got from forwarder:', packet);\n\n        this.updateKeepAlive(addr, packet, data.lqi, data.rssi);\n        \n        if(packet.cmd === 'searchgw') this.attendSearchGW(addr, packet);\n        if(packet.cmd === 'connect') this.attendConnect(addr, packet, data);\n        if(packet.cmd === 'disconnect') this.attendDisconnect(addr, packet, data);\n        if(packet.cmd === 'pingreq') this.attendPingReq(addr, packet, data);\n        if(packet.cmd === 'pingresp') this.attendPingResp(addr, packet);\n        if(packet.cmd === 'subscribe') this.attendSubscribe(addr, packet);\n        if(packet.cmd === 'unsubscribe') this.attendUnsubscribe(addr, packet);\n        if(packet.cmd === 'publish') this.attendPublish(addr, packet);\n        if(packet.cmd === 'register') this.attendRegister(addr, packet);\n        if(packet.cmd === 'willtopic') this.attendWillTopic(addr, packet);\n        if(packet.cmd === 'willmsg') this.attendWillMsg(addr, packet);\n        if(packet.cmd === 'willtopicupd') this.attendWillTopicUpd(addr, packet);\n        if(packet.cmd === 'willmsgupd') this.attendWillMsgUpd(addr, packet);\n        if(packet.cmd === 'pubrel') this.emit(addr + '/pubrel/' + packet.msgId);  // QOS2 from device to broker support\n        if(packet.cmd === 'pubrec') this.respondQoS2PubRec(addr, packet); // QOS2 from broker to device support (semi-dummy)\n\n      });\n\n    parser.on('error', this._onParserError);\n\n    return this.forwarder.connect()\n    .then(() => {\n      log.debug('Connected to Bridge');\n      return this.connectMqtt(mqttUrl);\n    })\n    .then(() => {\n      this.advertise();\n      this.advertiseInterval = setInterval(() => this.advertise(), TADV*1000);\n      // Init keep alive service\n      this.keepAliveInterval = setInterval(() => {\n        this.keepAliveService();\n      }, KASERVINTERVAL);\n    });\n    \n  }\n\n  // attend ADVERTISE\n  advertise() {\n    let frame = mqttsn.generate({ cmd: 'advertise', gwId: GWID, duration: TADV });\n    this.forwarder.send(0xFFFF, frame);\n    log.trace(\"Advertising...\");\n  }\n\n  onClientConnect() {\n    log.debug('Connected to MQTT broker');\n    // Subscribe to all saved topics on connect or reconnect\n    this.subscribeSavedTopics();\n  }\n\n  onClientOffline() {\n    log.warn('MQTT broker offline');\n  }\n\n  onClientReconnect() {\n    log.warn('Trying to reconnect with MQTT broker');\n  }\n\n  async onClientMessage(topic: string, message: Buffer, packet: any) {\n    if(message.length > MAXLEN) return log.warn(\"message too long\");\n\n    let subs;\n    try {\n      if(this.db == null) return; //log.error(\"tried to access db after destroy\", topic, message, packet);\n      subs = await this.db.getSubscriptionsFromTopic(topic);\n    }\n    catch(err) {\n      return log.error(err);\n    }\n\n    for(let i in subs) {\n      let topic = await this.db.getTopic({ id: subs[i].device }, { name: subs[i].topic });\n      if(!topic) continue;\n      let device = await this.db.getDeviceById(subs[i].device);\n      if(!device) continue;\n      if(!device.connected) continue; // Don't send if disconnected\n      if(device.state === 'asleep') {\n        log.trace(\"Got message for sleeping device, buffering\");\n        // buffer messages for sleeping device\n        await this.db.pushMessage({\n            device: device.id,\n            message: message,\n            dup: packet.dup,\n            retain: packet.retain,\n            qos: subs[i].qos,\n            topicId: topic.id,\n            msgId: packet.messageId,\n            topicIdType: 'normal'\n          });\n        continue;\n      }\n      // TODO implement QoS retry handling\n      let frame = mqttsn.generate({ cmd: 'publish', \n                        topicIdType: 'normal', \n                        dup: packet.dup, \n                        qos: subs[i].qos, \n                        retain: packet.retain, \n                        topicId: topic.id, \n                        msgId: packet.messageId,\n                        payload: message });\n\n      this.forwarder.send(device.address, frame);\n    }\n  }\n\n  async subscribeSavedTopics() {\n    let subs;\n    try {\n      subs = await this.db.getAllSubscriptions();\n    }\n    catch(err) {\n      return log.error(err);\n    }\n    for(let i = 0; i < subs.length; i++) {\n      this.client.subscribe(subs[i].topic, { qos: subs[i].qos });\n    }\n  }\n\n  async connectMqtt(url: string): Promise<void> {\n\n    if(this.client == null) this.client = mqtt.connect(url);\n\n    this.client.on('connect', this._onClientConnect);\n\n    this.client.on('offline', this._onClientOffline);\n\n    this.client.on('reconnect', this._onClientReconnect);\n\n    this.client.on('message', this._onClientMessage);\n\n    if(this.externalClient || this.client.connected) {\n      // Do connect event for the first time\n      // Subscribe to all saved topics on connect or reconnect\n      this.subscribeSavedTopics();\n      return Promise.resolve(null);\n    }\n    else {\n      return new Promise<void>((resolve, reject) => {\n        this.client.once('connect', () => {\n          resolve(null);\n        });\n      });\n    }\n  }\n\n  async isDeviceConnected(addr: number) {\n    let device = await this.db.getDeviceByAddr(addr);\n    if(!device) return false;\n    return device.connected;\n  }\n\n  async updateKeepAlive(addr: number, packet: any, lqi: number, rssi: number) {\n    let device = await this.db.getDeviceByAddr(addr);\n    if(!device) {\n      log.trace('Unknown device, addr:', addr);\n      return;\n    }\n    // Update last seen only if connected, else it should issue a connect message\n    if(device.connected) {\n      device.lastSeen = new Date();\n      device.lqi = lqi;\n      device.rssi = rssi;\n      await this.db.setDevice(device);\n    }\n  }\n\n  async keepAliveService() {\n    let devices = await this.db.getAllDevices();\n    for(let i in devices)\n    {\n      if(devices[i].connected)\n      {\n        let now = (new Date()).getTime();\n        // comparing time in ms\n        if(now - devices[i].lastSeen > (devices[i].duration*1000*DURATION_FACTOR + DURATION_TOLERANCE ) )\n        {\n          if(SEND_PINGREQ)  // If we want to try to send pingreq to the device as a last try before marking as unconnected\n          {\n            if(!devices[i].waitingPingres)\n            {\n              log.trace(\"Sending pingreq to\", devices[i].address);\n              devices[i].waitingPingres = true;\n              await this.db.setDevice(devices[i]);\n              let frame = mqttsn.generate({ cmd: 'pingreq' });\n              this.forwarder.send(devices[i].address, frame);\n            }\n            else if(devices[i].lastSeen > (devices[i].duration*1000*DURATION_FACTOR + DURATION_TOLERANCE ) + PINGRES_TOUT)\n            {\n              devices[i].connected = false;\n              devices[i].waitingPingres = false;\n              devices[i].state = 'lost';\n              await this.db.setDevice(devices[i]);\n              this.publishLastWill(devices[i]);\n              this.emit(\"deviceDisconnected\", devices[i]);\n              log.debug(\"Device disconnected, address:\", devices[i].address);\n            }\n            \n          }\n          else\n          {\n            devices[i].connected = false;\n            devices[i].state = 'lost';\n            await this.db.setDevice(devices[i]);\n            this.publishLastWill(devices[i]);\n            this.emit(\"deviceDisconnected\", devices[i]);\n            log.debug(\"Device disconnected, address:\", devices[i].address);\n          }\n        }\n      }\n    }\n  }\n\n  publishLastWill(device: any) {\n    if(!device.willTopic) return;\n    this.client.publish(device.willTopic, device.willMessage, { \n        qos: device.willQoS, \n        retain: device.willRetain \n      });\n  }\n\n  attendSearchGW(addr: number, packet: any) {\n    log.trace('searchgw duration:', packet.duration);\n    let frame = mqttsn.generate({ cmd: 'gwinfo', gwId: GWID });\n    this.forwarder.send(addr, frame);\n  }\n\n  async attendConnect(addr: number, packet: any, data: ForwarderMessage) {\n    // Check if device is already known\n    let device = await this.db.getDeviceByAddr(addr);\n\n    if(!device)\n    {\n      if(!this.allowUnknownDevices)\n      {\n        // Send connack false\n        let frame = mqttsn.generate({ cmd: 'connack', returnCode: 'Rejected: not supported' });\n        this.forwarder.send(addr, frame);\n        return;\n      }\n\n      // Create new device object\n      device = {\n        address: addr,\n        connected: true,\n        state: 'active',\n        waitingPingres: false,\n        lqi: data.lqi,\n        rssi: data.rssi,\n        duration: packet.duration,\n        lastSeen: new Date(),\n        willTopic: null,\n        willMessage: null,\n        willQoS: null,\n        willRetain: null\n      };\n    }\n    else\n    {\n      // Update device data\n      device.connected = true;\n      device.state = 'active';\n      device.lqi = data.lqi;\n      device.rssi = data.rssi;\n      device.duration = packet.duration;\n      device.lastSeen = new Date();\n    }\n\n    if(packet.cleanSession)\n    {\n      // Delete will data according to spec\n      device.willTopic = null;\n      device.willMessage = null;\n      device.willQoS = null;\n      device.willRetain = null;\n      // Remove all subscriptions from this client\n      await this.db.removeSubscriptionsFromDevice({ address: addr }); \n    }\n    \n    await this.db.setDevice(device);\n\n    if(packet.will) return this.requestWillTopic(addr); // If has will, first request will topic and msg\n\n    let frame = mqttsn.generate({ cmd: 'connack', returnCode: 'Accepted' });\n    this.forwarder.send(addr, frame);\n\n    this.emit(\"deviceConnected\", device);\n  }\n\n  async attendDisconnect(addr: number, packet: any, data: ForwarderMessage) {\n    let duration = packet.duration;\n\n    let device = await this.db.getDeviceByAddr(addr);\n    if(!device) return;\n\n    log.trace(\"Got Disconnect, duration:\", duration);\n\n    // If we got a disconnect with duration (for entering sleep), and our \n    // Device was not connected, mark as connected and announce connection\n    let wasDisconnected = false;\n    if(duration)\n    {\n      if(!ALLOW_SLEEP_RECONNECT && !device.connected) return;\n      // Go to sleep\n      device.duration = duration;\n      // Always mark as connected and update keep alive parameters\n      if(!device.connected) wasDisconnected = true;\n      device.connected = true;\n      device.lastSeen = new Date();\n      device.lqi = data.lqi;\n      device.rssi = data.rssi;\n      device.state = 'asleep';\n    }\n    else\n    {\n      // Disconnect\n      device.connected = false;\n      device.state = 'disconnected';\n    }\n    \n    await this.db.setDevice(device);\n\n    let frame = mqttsn.generate({ cmd: 'disconnect' });\n    this.forwarder.send(addr, frame);\n\n    if(!duration) this.emit(\"deviceDisconnected\", device);\n    if(!(duration == null) && wasDisconnected) this.emit(\"deviceConnected\", device);\n  }\n\n  async attendPingReq(addr: number, packet: any, data: ForwarderMessage) {\n    // if(typeof(packet.clientId) !== 'undefined' && packet.clientId !== null)\n    // {\n      let device = await this.db.getDeviceByAddr(addr);\n      if(!device) return;\n      if(device.connected && device.state === 'asleep')\n      {\n        log.trace(\"Got Ping from sleeping device\");\n        // Goto Awake state\n        device.state = 'awake';\n        // Send any pending requests to device\n        let messages = await this.db.popMessagesFromDevice(device.id);\n        log.trace(\"Buffered messages for sleeping device:\", messages);\n        for(let i in messages)\n        {\n          // TODO check if works with a lot of msgs\n          try\n          {\n            if(messages[i].message.data != null)\n            {\n              // Trap for young players: Sometimes when loading buffered messages from DB, \n              // the message is not a Buffer, but an object with the buffer in data.\n              // Happens when buffered messages where saved to disk, not attended and reloaded\n              // on gateway restart.\n              messages[i].message = new Buffer(messages[i].message.data);\n            }\n            let frame = mqttsn.generate({ cmd: 'publish', \n                              topicIdType: messages[i].topicIdType, \n                              dup: messages[i].dup, \n                              qos: messages[i].qos, \n                              retain: messages[i].retain, \n                              topicId: messages[i].topicId, \n                              msgId: messages[i].msgId,\n                              payload: messages[i].message });\n\n            this.forwarder.send(device.address, frame);\n          }\n          catch(err)\n          {\n            log.error(err);\n          }\n          \n        }\n        // Send pingresp for going back to sleep\n        device.state = 'asleep';\n      }\n      else if(!device.connected && device.state === 'lost' && ALLOW_LOST_RECONNECT_ON_PING)\n      {\n        log.trace('Reconnecting lost device via Ping');\n        // Update device data\n        device.connected = true;\n        device.state = 'active'; // TODO Test if no problem with sleeping devices...\n        device.lqi = data.lqi;\n        device.rssi = data.rssi;\n        device.lastSeen = new Date();\n        await this.db.setDevice(device);\n        this.emit(\"deviceConnected\", device);\n      }\n      else if(!device.connected) return;\n    // }\n\n    let frame = mqttsn.generate({ cmd: 'pingresp' });\n    this.forwarder.send(addr, frame);\n  }\n\n  async attendPingResp(addr: number, packet: any) {\n    log.trace(\"Got Ping response from\", addr);\n\n    // Update waitingPingres flag of device\n    let device = await this.db.getDeviceByAddr(addr);\n    if(!device) return;\n    device.waitingPingres = false;\n    await this.db.setDevice(device);\n  }\n\n  async attendSubscribe(addr: number, packet: any) {\n    let qos = packet.qos;\n    let topicIdType = packet.topicIdType; // TODO do different if type is != 'normal'\n    let msgId = packet.msgId;\n    let topicName: string;\n\n    // Validate device connection\n    if(!this.isDeviceConnected(addr)) return;\n    if(topicIdType == null) return log.warn(\"Invalid topicIdType on subscribe\");\n\n    if(topicIdType === 'pre-defined') topicName = packet.topicId;\n    else topicName = packet.topicName;\n\n    if(topicName == null) return log.warn(\"Invalid topicName on subscribe\");\n\n    let subscription = await this.db.setSubscription({ address: addr }, { name: topicName }, qos);\n    // Check if topic is registered\n    let topicInfo = await this.db.getTopic({ address: addr }, { name: topicName });\n    if(!topicInfo) topicInfo = await this.db.setTopic({ address: addr }, topicName, null);  // generate new topic\n\n    let frame = mqttsn.generate({ cmd: 'suback', qos: qos, topicId: topicInfo.id, msgId: msgId, returnCode: 'Accepted' });\n    this.forwarder.send(addr, frame);\n\n    // Give time for device to settle, Workaround for retained messages\n    setTimeout(() => {\n      this.client.subscribe(topicName, { qos: qos });\n    }, 500);\n  }\n\n  async attendUnsubscribe(addr: number, packet: any) {\n    let topicIdType = packet.topicIdType;\n    let msgId = packet.msgId;\n    let topicName;\n\n    // Validate device connection\n    if(!this.isDeviceConnected(addr)) return;\n\n    if(topicIdType === 'pre-defined') topicName = packet.topicId;\n    else topicName = packet.topicName;\n\n    await this.db.removeSubscription({ address: addr }, topicName, topicIdType);\n    let frame = mqttsn.generate({ cmd: 'unsuback', msgId: msgId });\n    this.forwarder.send(addr, frame);\n  }\n\n  async attendPublish(addr: number, packet: any) {\n    let qos = packet.qos;\n    let retain = packet.retain;\n    let topicIdType = packet.topicIdType; // TODO do different if type is != 'normal'\n    let topicId = packet.topicId;\n    let msgId = packet.msgId;\n    let payload = packet.payload;\n\n    // Validate device connection\n    if(!this.isDeviceConnected(addr)) return;\n\n    let topicInfo = await this.db.getTopic({ address: addr }, { id: topicId });\n    if(!topicInfo)\n    {\n      // Send PUBACK\n      let frame = mqttsn.generate({ cmd: 'puback', topicId: topicId, msgId: msgId, returnCode: 'Rejected: invalid topic ID' });\n      this.forwarder.send(addr, frame);\n      return log.warn(\"Attend publish: Unknown topic id\");\n    }\n\n    // NOTE: dup currently not supported by mqtt library... it will be ignored\n    this.client.publish(topicInfo.name, payload, { qos: qos, retain: retain/*, dup: packet.dup*/ }, (err: any) => {\n        if(err) {\n          log.error(\"Publish error:\", err);\n          let frame = mqttsn.generate({ cmd: 'puback', topicId: topicId, msgId: msgId, returnCode: 'Rejected: congestion' });\n          this.forwarder.send(addr, frame);\n          return;\n        }\n\n        if(qos === 1) {\n          // Send PUBACK\n          let frame = mqttsn.generate({ cmd: 'puback', topicId: topicId, msgId: msgId, returnCode: 'Accepted' });\n          this.forwarder.send(addr, frame);\n        }\n        else if(qos === 2) {\n          // Send PUBREC\n          let frame = mqttsn.generate({ cmd: 'pubrec', msgId: msgId });\n          this.forwarder.send(addr, frame);\n          // Wait for PUBREL\n          var self = this;\n          function onPubRel() {\n            // Send PUBCOMP\n            let frame = mqttsn.generate({ cmd: 'pubcomp', msgId: msgId });\n            self.forwarder.send(addr, frame);\n          }\n          this.once(addr + '/pubrel/' + msgId, onPubRel);\n          // cleanup subscription on timeout\n          setTimeout(() => {\n              this.removeListener(addr + '/pubrel/' + msgId, onPubRel);\n            }, TRETRY*1000);\n        }\n      });\n  }\n\n  respondQoS2PubRec(addr: number, packet: any) {\n    let msgId = packet.msgId;\n    // Send PUBREL\n    let frame = mqttsn.generate({ cmd: 'pubrel', msgId: msgId });\n    this.forwarder.send(addr, frame);\n    // Should wait for PUBCOMP, but we just dont mind...\n  }\n\n  async attendRegister(addr: number, packet: any) {\n    //let topicId = packet.topicId;\n    let msgId = packet.msgId;\n    let topicName = packet.topicName;\n\n    // Validate device connection\n    if(!this.isDeviceConnected(addr)) return;\n\n    // Check if topic already registered\n    let topicInfo = await this.db.getTopic({ address: addr }, { name: topicName });\n    if(!topicInfo) topicInfo = await this.db.setTopic({ address: addr }, topicName, null);  // generate new topic\n\n    // regack with found topic id\n    let frame = mqttsn.generate({ cmd: 'regack', topicId: topicInfo.id, returnCode: 'Accepted' });\n    this.forwarder.send(addr, frame);\n  }\n\n  requestWillTopic(addr: number) {\n    let frame = mqttsn.generate({ cmd: 'willtopicreq' });\n    this.forwarder.send(addr, frame);\n  }\n\n  async attendWillTopic(addr: number, packet: any) {\n    let device = await this.db.getDeviceByAddr(addr);\n    if(!device) return log.warn(\"Unknown device trying to register will topic\");\n\n    device.willQoS = packet.qos;\n    device.willRetain = packet.retain;\n    device.willTopic = packet.willTopic;\n\n    await this.db.setDevice(device);\n\n    this.requestWillMsg(addr);\n  }\n\n  requestWillMsg(addr: number) {\n    let frame = mqttsn.generate({ cmd: 'willmsgreq' });\n    this.forwarder.send(addr, frame);\n  }\n\n  async attendWillMsg(addr: number, packet: any) {\n    let device = await this.db.getDeviceByAddr(addr);\n    if(!device) return log.warn(\"Unknown device trying to register will msg\");\n\n    device.willMessage = packet.willMsg;\n\n    await this.db.setDevice(device);\n\n    // Send connack\n    let frame = mqttsn.generate({ cmd: 'connack', returnCode: 'Accepted' });\n    this.forwarder.send(addr, frame);\n\n    this.emit(\"deviceConnected\", device);\n  }\n\n  async attendWillTopicUpd(addr: number, packet: any) {\n    // Validate device connection\n    if(!this.isDeviceConnected(addr)) return;\n\n    let device = await this.db.getDeviceByAddr(addr);\n    if(!device) return log.warn(\"Unknown device trying to update will topic\");\n\n    if(!packet.willTopic) // Remove will topic and will message\n    {\n      device.willQoS = null;\n      device.willRetain = null;\n      device.willTopic = null;\n      device.willMessage = null;\n    }\n    else\n    {\n      device.willQoS = packet.qos;\n      device.willRetain = packet.retain;\n      device.willTopic = packet.willTopic;\n    }\n\n    await this.db.setDevice(device);\n\n    let frame = mqttsn.generate({ cmd: 'willtopicresp', returnCode: 'Accepted' });\n    this.forwarder.send(addr, frame);\n  }\n\n  async attendWillMsgUpd(addr: number, packet: any) {\n    // Validate device connection\n    if(!this.isDeviceConnected(addr)) return;\n\n    let device = await this.db.getDeviceByAddr(addr);\n    if(!device) return log.warn(\"Unknown device trying to update will msg\");\n\n    device.willMessage = packet.willMsg;\n\n    await this.db.setDevice(device);\n\n    let frame = mqttsn.generate({ cmd: 'willmsgresp', returnCode: 'Accepted' });\n    this.forwarder.send(addr, frame);\n  }\n\n}\n"],"sourceRoot":"/Users/rod/workshop/aquila-gateway/src"}