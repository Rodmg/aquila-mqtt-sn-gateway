{"version":3,"sources":["../src/db.ts"],"names":[],"mappings":";;AAAA,uCAAuC;AACvC,qCAA+B;AAC/B,4BAA4B;AAE5B,IAAI,SAAS,GAAG;IACd,OAAO,EAAE,QAAQ;IACjB,OAAO,EAAE,WAAW;IACpB,OAAO,EAAE,KAAK;IACd,MAAM,EAAE;QACN,eAAe,EAAE,IAAI;QACrB,eAAe,EAAE;YACf,MAAM;gBACJ,IAAI,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACtC,OAAO,MAAM,CAAC,SAAS,CAAC;gBACxB,OAAO,MAAM,CAAC,SAAS,CAAC;gBACxB,MAAM,CAAC,MAAM,CAAC;YAChB,CAAC;SACF;KACF;CACF,CAAC;AAGW,QAAA,EAAE,GAAG,IAAI,SAAS,CAAC,gBAAgB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;AAEvE,2BAA2B,KAAK;IAC9B,IAAI,KAAK,GAAQ,EAAE,CAAC;IACpB,EAAE,CAAA,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC;QAAC,KAAK,GAAG,KAAK,CAAC,eAAe,EAAE,CAAC;IAClE,GAAG,CAAA,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;QAC9C,EAAE,CAAA,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;YAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACnE,IAAI;YAAC,YAAG,CAAC,IAAI,CAAC,qCAAqC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAChE,CAAC;AACH,CAAC;AAGD;IACE,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,UAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,GAAG,CAAA,CAAC,IAAI,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC;QACxB,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AACpC,CAAC;AAPD,0BAOC","file":"db.js","sourcesContent":["import * as Sequelize from 'sequelize';\nimport { log } from './Logger';\nimport * as _ from 'lodash';\n\nlet dbOptions = {\n  dialect: 'sqlite',\n  storage: 'db.sqlite',\n  logging: false,\n  define: {\n    freezeTableName: true,\n    instanceMethods: {\n      toJSON() {\n        let object = _.clone(this.dataValues);\n        delete object.createdAt;\n        delete object.updatedAt;\n        return object;\n      }\n    }\n  }\n};\n\n//dbOptions = _.merge(dbOptions, config.db.options);\nexport const db = new Sequelize('aquila-gateway', 'gw', '', dbOptions);\n\nfunction setupAssociations(model) {\n  let asocs: any = {};\n  if(model.getAssociations != null) asocs = model.getAssociations();\n  for(let k of Object.keys(asocs)) {\n    let asoc = asocs[k];\n    let options = _.omit(asoc, ['type', 'model']);\n    if(model[asoc.type] != null) model[asoc.type](asoc.model, options);\n    else log.warn('Invalid association type for model:', k, asoc);\n  }\n}\n\n// Should be called in server\nexport function setupDB(): Promise<any> {\n  let models = Object.keys(db.models).map((k) => db.models[k]);\n  for(let model of models) {\n    setupAssociations(model);\n  }\n\n  return Promise.resolve(db.sync());\n}\n"],"sourceRoot":"/Users/rod/workshop/aquila-gateway/src"}