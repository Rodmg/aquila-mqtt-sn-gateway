{"version":3,"sources":["../src/QoSSender.ts"],"names":[],"mappings":"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","file":"QoSSender.js","sourcesContent":["\nimport { EventEmitter } from 'events';\nimport { logÂ } from './Logger';\nimport * as mqttsn from 'mqttsn-packet';\nimport { Forwarder } from './Forwarder';\n\nconst MAX_RETRIES = 3;\nconst TIMEOUT = 1000;\n\nexport interface PublishMessage {\n  topicIdType: string;\n  qos: number;\n  retain: boolean;\n  topicId: number,\n  payload: Buffer\n}\n\nexport interface MsgBufItem {\n  message: PublishMessage,\n  addr: number,\n  retries: number,\n  msgId: number\n}\n\nexport class QoSSender extends EventEmitter {\n\n  forwarder: Forwarder;\n  msgBuffer: Array<MsgBufItem>;\n\n  constructor(forwarder: Forwarder) {\n    super();\n\n    this.forwarder = forwarder;\n    this.msgBuffer = [];\n  }\n\n  generateMsgId(): number {\n    let ids: Array<number> = this.msgBuffer.map((item: MsgBufItem) => {\n      return item.msgId;\n    });\n    ids.sort(function(a, b) { return a - b });\n\n    let nextIndex = null;\n\n    // Special case when there are no previous msgs registered\n    if(ids.length === 0) return 1;\n    // Find lower unused address\n    for(let i = 0; i < ids.length; i++) {\n      let current = ids[i];\n      let prev = 0;\n      if(i != 0) prev = ids[i - 1];\n      if(current > prev + 1) {\n        // Found discontinuity, return next value inside discontinuity\n        nextIndex = prev + 1;\n        return nextIndex;\n      }\n    }\n    // If we reached here, there is no discontinuity, return next value if available\n    nextIndex = ids[ids.length - 1] + 1;\n    // Max id is 0xFFFF according to MQTT-SN spec\n    if(nextIndex > 0xFFFF) throw new Error(\"Max msgid reached\");\n    return nextIndex;\n  }\n\n  send(addr: number, message: PublishMessage): Promise<boolean> {\n    if(message.qos === 1) return this.sendQoS1(addr, message);\n    else if(message.qos === 2) return this.sendQoS2(addr, message);\n    else return this.sendQoS0(addr, message);\n  }\n\n  sendQoS0(addr: number, message: PublishMessage): Promise<boolean> {\n    let packet = mqttsn.generate({ cmd: 'publish', \n                          topicIdType: message.topicIdType, \n                          dup: false, \n                          qos: message.qos, \n                          retain: message.retain, \n                          topicId: message.topicId,\n                          msgId: 0,\n                          payload: message.payload });\n    this.forwarder.send(addr, packet);\n    return Promise.resolve(true);\n  }\n\n  sendQoS1(addr: number, message: PublishMessage): Promise<boolean> {\n    let msgId = this.generateMsgId();\n    this.msgBuffer.push({\n      message: message,\n      addr: addr,\n      retries: 0,\n      msgId: msgId\n    });\n\n    return new Promise((resolve, reject) => {\n      let resTopic = `puback-${msgId}`;\n      let tout = null;\n      let confirmCb = (data) => {\n        if(tout) {\n          clearTimeout(tout);\n          this.removeListener(resTopic, confirmCb);\n          this.popMsg(msgId);\n          return resolve(true);\n        }\n      };\n\n      let prepareTimeout = () => {\n        tout = setTimeout(() => {\n          tout = null;\n          let msg = this.getMsg(msgId);\n          if(msg.retries >= MAX_RETRIES) {\n            this.removeListener(resTopic, confirmCb);\n            this.popMsg(msgId);\n            return reject(new Error('QOS1 send timeout'));\n          }\n          msg.retries++;\n          prepareTimeout();\n          // Retry\n          let packet = mqttsn.generate({ cmd: 'publish', \n                          topicIdType: message.topicIdType, \n                          dup: true, \n                          qos: 1, \n                          retain: message.retain, \n                          topicId: message.topicId,\n                          msgId: msgId,\n                          payload: message.payload });\n          this.forwarder.send(addr, packet);\n        }, TIMEOUT);\n      };\n\n      prepareTimeout();\n      \n      this.once(resTopic, confirmCb);\n\n      let packet = mqttsn.generate({ cmd: 'publish', \n                          topicIdType: message.topicIdType, \n                          dup: false, \n                          qos: 1, \n                          retain: message.retain, \n                          topicId: message.topicId,\n                          msgId: msgId,\n                          payload: message.payload });\n      this.forwarder.send(addr, packet);\n    });\n\n  }\n\n  sendQoS2(addr: number, message: PublishMessage): Promise<boolean> {\n    let msgId = this.generateMsgId();\n    this.msgBuffer.push({\n      message: message,\n      addr: addr,\n      retries: 0,\n      msgId: msgId\n    });\n\n    return new Promise((resolve, reject) => {\n      let resTopic = `pubrec-${msgId}`;\n      let tout = null;\n      let confirmCb = (data) => {\n        if(tout) {\n          clearTimeout(tout);\n          this.removeListener(resTopic, confirmCb);\n          this.popMsg(msgId);\n\n          let frame = mqttsn.generate({ cmd: 'pubrel', msgId: msgId });\n          this.forwarder.send(addr, frame);\n          // Should wait for PUBCOMP, but we just dont mind... TODO implement?\n\n          return resolve(true);\n        }\n      };\n\n      let prepareTimeout = () => {\n        tout = setTimeout(() => {\n          tout = null;\n          let msg = this.getMsg(msgId);\n          if(msg.retries >= MAX_RETRIES) {\n            this.removeListener(resTopic, confirmCb);\n            this.popMsg(msgId);\n            return reject(new Error('QOS2 send timeout'));\n          }\n          msg.retries++;\n          prepareTimeout();\n          // Retry\n          let packet = mqttsn.generate({ cmd: 'publish', \n                          topicIdType: message.topicIdType, \n                          dup: true, \n                          qos: 2, \n                          retain: message.retain, \n                          topicId: message.topicId,\n                          msgId: msgId,\n                          payload: message.payload });\n          this.forwarder.send(addr, packet);\n        }, TIMEOUT);\n      };\n\n      prepareTimeout();\n      \n      this.once(resTopic, confirmCb);\n\n      let packet = mqttsn.generate({ cmd: 'publish', \n                          topicIdType: message.topicIdType, \n                          dup: false, \n                          qos: 2, \n                          retain: message.retain, \n                          topicId: message.topicId,\n                          msgId: msgId,\n                          payload: message.payload });\n      this.forwarder.send(addr, packet);\n    });\n  }\n\n  getMsg(msgId: number): MsgBufItem | null {\n    for(let msg of this.msgBuffer) {\n      if(msg.msgId === msgId) return msg;\n    }\n    return null;\n  }\n\n  popMsg(msgId: number): MsgBufItem | null {\n    for(let msg of this.msgBuffer) {\n      if(msg.msgId === msgId) {\n        var i = this.msgBuffer.indexOf(msg);\n        if(i != -1) {\n          this.msgBuffer.splice(i, 1);\n        }\n        console.log(this.msgBuffer);\n        return msg;\n      }\n    }\n    return null;\n  }\n\n  attendPuback(addr: number, packet: any) {\n    let msgId = packet.msgId;\n    console.log('puback', msgId);\n    this.emit(`puback-${msgId}`, packet);\n  }\n\n  attendPubrec(addr: number, packet: any) {\n    let msgId = packet.msgId;\n    console.log('pubrec', msgId);\n    this.emit(`pubrec-${msgId}`, packet);\n  }\n\n  attendPubcomp(addr: number, packet: any) {\n    // Not currently used\n    let msgId = packet.msgId;\n    console.log('pubcomp', msgId);\n    this.emit(`pubcomp-${msgId}`, packet);\n  }\n\n}"],"sourceRoot":"/Users/rod/workshop/aquila-gateway/src"}