{"version":3,"sources":["../src/TCPTransport.ts"],"names":[],"mappings":"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","file":"TCPTransport.js","sourcesContent":["// TCPTransport.js\n\nimport * as Slip from 'node-slip';\nimport { EventEmitter } from 'events';\nimport * as net from 'net';\nimport { log } from './Logger';\nimport { calcCrc, checkCrc } from './CrcUtils';\nimport { TransportInterface } from './interfaces';\n\nexport class TCPTransport extends EventEmitter implements TransportInterface {\n\n  fake: boolean = false;\n  port: number;\n  // Serial port write buffer control\n  writing: boolean = false;\n  writeBuffer: Array<any> = [];\n\n  parser: any;\n  server: any = null;\n  sock: any = null;\n\n  constructor(port: number) {\n    super();\n\n    this.port = port;\n\n    const receiver = {\n      data: (input: Buffer) => {\n        // Check CRC\n        let crcOk = checkCrc(input);\n        // Strip CRC data\n        let data = input.slice(0, input.length - 2);\n\n        if(crcOk) {\n          this.emit(\"data\", data);\n        }\n        else {\n          this.emit(\"crcError\", data);\n        }\n      },\n      framing: (input: Buffer) => {\n        this.emit(\"framingError\", input);\n      },\n      escape: (input: Buffer) => {\n        this.emit(\"escapeError\", input);\n      }\n    };\n\n    this.parser = new Slip.parser(receiver);\n  }\n\n  connect(): Promise<void> {\n    if(this.server != null) return Promise.reject(new Error('Already connected')); // Already connected\n    \n    log.info(\"TCP Transport server listening on port\", this.port);\n\n    return new Promise<void>((resolve, reject) => {\n      this.server = net.createServer((sock) => {\n        log.info('TCP client connected: ' + sock.remoteAddress +':'+ sock.remotePort);\n        if(this.sock != null) {\n          log.warn('There is a bridge already connected, ignoring new connection');\n          return;\n        }\n\n        this.sock = sock;\n\n        // TODO: Keep alive not working, try: https://www.npmjs.com/package/net-keepalive\n        //this.sock.setTimeout(10000);\n        this.sock.setKeepAlive(true, 0);\n\n        this.sock.on(\"data\", (data: any) => {\n          this.parser.write(data);\n        });\n\n        this.sock.on(\"connect\", () => {\n          this.emit(\"ready\");\n        });\n\n        this.sock.on(\"error\", (err: any) => {\n          log.debug(\"Socket error\");\n          this.emit(\"error\", err);\n        });\n\n        this.sock.on(\"end\", (err: any) => {\n          log.debug(\"Socket end\");\n          this.emit(\"disconnect\", err);\n          this.sock = null;\n        });\n\n        this.sock.on(\"close\", () => {\n          log.debug(\"Socket close\");\n          this.emit(\"close\");\n          this.sock = null;\n        });\n\n        this.sock.on(\"timeout\", () => {\n          log.debug(\"Socket timeout\");\n          this.sock.end();\n        });\n\n        resolve(null);\n\n      }).listen(this.port);\n    });\n    \n  }\n\n  close(callback: Function) {\n    if(!callback) callback = function(){};\n    if(this.sock == null) return;\n    this.sock.close((err: any) => {\n      if(err) return callback(err);  \n    });\n  }\n\n  write(data: any) {\n    data = new Buffer(data);\n    // Append CRC\n    let crc = calcCrc(data);\n    let crcBuf = new Buffer(2);\n\n    crcBuf.writeUInt16LE(crc, 0);\n\n    let buffer = Buffer.concat([data, crcBuf]);\n\n    // Convert to Slip\n    let slipData = Slip.generator(buffer);\n\n    this.writeBuffer.push(slipData);\n    this.writeNow();\n  }\n\n  writeNow() {\n    if(this.sock == null) return;\n\n    // Nothing to do here\n    if(this.writeBuffer.length <= 0) return;\n    // We are busy, do nothing\n    if(this.writing) return;\n    this.writing = true;\n\n    // do nothing if we are in fake mode\n    if(this.fake) { this.writing = false; return; }\n\n\n    let data = this.writeBuffer.shift();\n    this.sock.write(data);\n\n    //if(config.debug) console.log(\"Sending:\", data);\n\n    this.writing = false;\n    if(this.writeBuffer.length > 0) this.writeNow();\n  }\n\n}\n"],"sourceRoot":"/Users/rod/workshop/blastbot-gateway/aquila-gateway/src"}